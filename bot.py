from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
import asyncio

from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

os.environ["GROQ_API_KEY"] = "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"
llm = ChatGroq(model="llama3-70b-8192")

token_bot = '7685591016:AAG8M4rZPovKNrOuKqq6sMwT8stOg1vk2rc'

bot = Bot(token=token_bot, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class Start(StatesGroup):
  question = State()

class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_language = State()

@dp.message(Command("start"), State(None))
async def start_cmd(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,)) as cursor:
        if await cursor.fetchone() is None:
          await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
          await state.set_state(Registration.waiting_for_name)
        else:
          username = db.execute("SELECT name FROM users WHERE user_id = ?", (user_id,))
          await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {username}! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
          await message.answer('–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å!')
          await state.set_state(Start.question)

@dp.message(Registration.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å? (ru/en)")
    await state.set_state(Registration.waiting_for_language)

@dp.message(Registration.waiting_for_language)
async def process_language(message: Message, state: FSMContext):
    if message.text.lower() not in ["ru", "en"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ ru –∏–ª–∏ en.")
        return

    user_data = await state.get_data()
    user_id = message.from_user.id
    name = user_data["name"]
    language = message.text.lower()

    async with aiosqlite.connect("users.db") as db:
        await db.execute("INSERT INTO users (user_id, name, language) VALUES (?, ?, ?)", (user_id, name, language))
        await db.commit()

    await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò–º—è: {name}, –Ø–∑—ã–∫: {language}")
    await message.answer('–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å!')
    await state.set_state(Start.question)

@dp.message(F.text, Start.question)
async def llm_answer(message: Message, state: FSMContext):
  try:
    print('–£–ê–£–ê–£–ê–£–ê–£–ê')
    prompt_template = PromptTemplate(
        input_variables=["input_text"],
        template="{input_text}\n Please make answer shorter. Pease don't use ** in your answer."
    )
    solver_chain = LLMChain(llm=llm, prompt=prompt_template, output_key='answer')
    print('–ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    ans = solver_chain.invoke({"input_text": message.text})['answer']
    await state.update_data(answer_en=ans)
    await state.update_data(lan='en')
    print('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω')
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–∑–≤—É—á–∏—Ç—å üé§", callback_data = '–û–∑–≤—É—á–∏—Ç—å')
    builder.button(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ üåê", callback_data = '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏')
    await message.answer(ans, reply_markup=builder.as_markup())

  except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data == '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏')
async def send_transl_text(call: CallbackQuery, state: FSMContext):
  await call.message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –¥—É–º–∞—é...')
  await call.message.answer_photo('https://i.pinimg.com/originals/d7/b4/5a/d7b45a0869e4c2300e81f633343f2c65.png')
  data = await state.get_data()
  ans = data.get('answer_en')
  text = await translate_text(ans)
  print('–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –Ω—É –∏–ª–∏ –≤—Å—ë —Ö—É–π–Ω—è')
  await state.update_data(answer_ru=text)
  await state.update_data(lan='ru')
  builder = InlineKeyboardBuilder()
  builder.button(text="–û–∑–≤—É—á–∏—Ç—å üé§", callback_data = '–û–∑–≤—É—á–∏—Ç—å')
  try:
    await call.message.answer(text, reply_markup=builder.as_markup())
  except Exception as e:
    await call.message.answer('–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π :)')


@dp.callback_query(F.data == '–û–∑–≤—É—á–∏—Ç—å')
async def send_voice(call: CallbackQuery, state: FSMContext):
  await call.message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –¥—É–º–∞—é...')
  await call.message.answer_photo('https://i.pinimg.com/originals/d7/b4/5a/d7b45a0869e4c2300e81f633343f2c65.png')
  data = await state.get_data()
  lan = data.get('lan')
  if lan == 'ru':
    ans = data.get('answer_ru')
  else:
    ans = data.get('answer_en')
  text_to_speech(ans, lan)
  try:
    audio_file = FSInputFile('output.mp3')
    await call.message.answer_voice(voice=audio_file)
    os.remove('output.mp3')
  except Exception as e:
    await call.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    print('–ì–æ–ª–æ—Å–æ–≤–æ–µ —Ö—É–π–Ω—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å')

async def main():
  # dp.startup.register(start_bot)
  dp.startup.register(start_db)
  try:
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
  finally:
    await bot.session.close()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

await main()

