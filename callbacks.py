@dp.callback_query(F.data == '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏')
async def send_transl_text(call: CallbackQuery, state: FSMContext):
  await call.message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –¥—É–º–∞—é...')
  await call.message.answer_photo('https://i.pinimg.com/originals/d7/b4/5a/d7b45a0869e4c2300e81f633343f2c65.png')
  data = await state.get_data()
  ans = data.get('answer_en')
  text = await translate_text(ans)
  print('–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –Ω—É –∏–ª–∏ –≤—Å—ë —Ö—É–π–Ω—è')
  await state.update_data(answer_ru=text)
  await state.update_data(lan='ru')
  builder = InlineKeyboardBuilder()
  builder.button(text="–û–∑–≤—É—á–∏—Ç—å üé§", callback_data = '–û–∑–≤—É—á–∏—Ç—å')
  try:
    await call.message.answer(text, reply_markup=builder.as_markup())
  except Exception as e:
    await call.message.answer('–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π :)')


@dp.callback_query(F.data == '–û–∑–≤—É—á–∏—Ç—å')
async def send_voice(call: CallbackQuery, state: FSMContext):
  await call.message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –¥—É–º–∞—é...')
  await call.message.answer_photo('https://i.pinimg.com/originals/d7/b4/5a/d7b45a0869e4c2300e81f633343f2c65.png')
  data = await state.get_data()
  lan = data.get('lan')
  if lan == 'ru':
    ans = data.get('answer_ru')
  else:
    ans = data.get('answer_en')
  text_to_speech(ans, lan)
  try:
    audio_file = FSInputFile('output.mp3')
    await call.message.answer_voice(voice=audio_file)
    os.remove('output.mp3')
  except Exception as e:
    await call.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    print('–ì–æ–ª–æ—Å–æ–≤–æ–µ —Ö—É–π–Ω—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å')